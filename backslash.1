'\" t
.\"     Title: backslash
.\"    Author: [see the "AUTHOR(S)" section]
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-06-14
.\"    Manual: Mutineer's Guide - idioms
.\"    Source: Mutiny
.\"  Language: English
.\"
.TH "BACKSLASH" "1" "2020-06-14" "Mutiny" "Mutineer\(aqs Guide \- idioms"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
backslash \- combine lines that end with a backslash
.SH "SYNOPSIS"
.sp
\fBbackslash\fP [\fIFILE\fP]
.SH "DESCRIPTION"
.sp
\fBbackslash\fP combines lines that end up with a backslash. It takes no options, and merely calls out
to sed(1) to actually do the work.
.sp
For example, if \fBbackslash\fP were given as input:
.sp
.if n .RS 4
.nf
foo bar baz \(rs
quux quuz xyzzy\(rs
zzy
.fi
.if n .RE
.sp
it would output:
.sp
.if n .RS 4
.nf
foo bar baz quux quuz xyzzyzzy
.fi
.if n .RE
.SH "NOTES"
.sp
It would be a plain ol\(aq sed(1) script, but that would cause options to be passed to sed(1), which
from a presentation standpoint just looks silly.
.SH "SEE ALSO"
.sp
sed(1)
.SH "CONTRIBUTING"
.sp
The canonical URL of this repository is \c
.URL "https://git.mutiny.red/mutiny/idioms" "" "."
Submit patches and bugs to \c
.MTO "kylie\(atsomas.is" "" "."
.sp
There is also an IRC channel for \fBidioms\fP and other projects at \c
.URL "irc://irc.freenode.net/#mutiny" "" "."
Please don\(cqt hesitate to message if you need help.
.SH "LICENSE"
.sp
\fBidioms\fP is in the public domain.
.sp
To the extent possible under law, Kylie McClain has waived all copyright and related or neighboring
rights to this work.
.sp
.URL "http://creativecommons.org/publicdomain/zero/1.0/" "" ""